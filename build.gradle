plugins {
    id "java"
}

sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.addAll([
            '--enable-preview',
            '-Xlint:serial',
            '-Xlint:unchecked',
            /*'-Xlint:preview',*/
    ])
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    implementation("org.projectlombok:lombok:${lombokVersion}")

    implementation("com.google.code.findbugs:jsr305:3.0.2") // TODO: replace it by jetbrains annotations
    implementation("org.apache.commons:commons-csv:1.7")
    //implementation("com.google.guava:guava:28.1-jre")

    // test scope

    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    
    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))

    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.junit.platform:junit-platform-launcher")
    
}

repositories {
    jcenter()
}

test {

    useJUnitPlatform {
        excludeTags "integration"
        includeEngines "junit-jupiter"
    }

    testLogging {
		events "failed"
		exceptionFormat "full"
	}

    enableAssertions = true
    testLogging.showStandardStreams = false

    include "**/**Test.*"
    include "**/**Tests.*"

    afterTest { desc, result ->
        //org.gradle.api.internal.tasks.testing.results.DefaultTestResult
        if (result.resultType == TestResult.ResultType.FAILURE) {
            result.failures.each { failure ->
                def sep = ("=" * 80)
                if (failure instanceof Throwable) {
                    StringWriter writer = new StringWriter()
                    failure.printStackTrace(new PrintWriter(writer))
                    failure = writer.toString()
                    writer.close()
                }
                System.err.printf("%n${sep}%n${failure}%n${sep}%n%n")
            }
        }
    }

    afterSuite { desc, result ->
        if (!desc.parent && result.testCount > 0) { // will match the outermost suite

            def output = "${project.name}: ${result.resultType} (${result.testCount} tests"
            if (result.successfulTestCount > 0 && result.testCount != result.successfulTestCount)
                output += ", ${result.successfulTestCount} successes"
            if (result.failedTestCount > 0)
                output += ", ${result.failedTestCount} failures"
            if (result.skippedTestCount > 0)
                output += ", ${result.skippedTestCount} skipped"
            output += ")"

            def startItem = "| "
            def endItem = " |"
            def sep = ("-" * (startItem.length() + output.length() + endItem.length()))

            (result.failedTestCount > 0 ? System.err : System.out).printf("%n${sep}%n${startItem}${output}${endItem}%n${sep}%n%n")
        }
    }
}

wrapper {

    doFirst {
        println "Gradle Version: ${gradleWrappedVersion}"
    }

    gradleVersion = "${gradleWrappedVersion}"
    distributionType = Wrapper.DistributionType.ALL
}
